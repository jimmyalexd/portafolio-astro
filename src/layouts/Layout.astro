---
import "../styles/global.css";
import BootstrapClientScript from "../components/BootstrapClientScript.jsx";

const { title = 'Mi Portafolio' } = Astro.props;
---

<!DOCTYPE html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{title}</title>
  	</head>
  	<body>
		<header>
			<nav class="navbar navbar-expand-lg navbar-dark shadow-sm px-4">
			  <div class="container-fluid d-flex justify-content-between align-items-center">
				
				<!-- Botón para cambiar tema a la IZQUIERDA -->
				<button id="theme-toggle" class="btn btn-outline-light">
				  Tema
				</button>
		  
				<!-- Menú hamburguesa y dropdown solo visible en móvil (a la derecha) -->
				<div class="dropdown d-lg-none">
				  <button
					class="navbar-toggler"
					type="button"
					id="dropdownMenuButton"
					data-bs-toggle="dropdown"
					aria-expanded="false"
				  >
					<span class="navbar-toggler-icon"></span>
				  </button>
				  <ul class="dropdown-menu dropdown-menu-end shadow"
					  id="dropdownAnimatedMenu"
					  aria-labelledby="dropdownMenuButton">
					<li><a class="dropdown-item fw-bold" href="#welcome">Inicio</a></li>
					<li><a class="dropdown-item fw-bold" href="#experience">Experiencia</a></li>
					<li><a class="dropdown-item fw-bold" href="#skills">Skills</a></li>
					<li><a class="dropdown-item fw-bold" href="#projects">Proyectos</a></li>
					<li><a class="dropdown-item fw-bold" href="#contact">Contacto</a></li>
				  </ul>
				</div>
		  
				<!-- Menú horizontal visible solo en pantallas grandes (a la derecha) -->
				<div class="d-none d-lg-block">
				  <ul class="navbar-nav flex-row align-items-center">
					<li class="nav-item"><a class="nav-link fw-bold" href="#welcome">Inicio</a></li>
					<li class="nav-item">/</li>
					<li class="nav-item"><a class="nav-link fw-bold" href="#experience">Experiencia</a></li>
					<li class="nav-item">/</li>
					<li class="nav-item"><a class="nav-link fw-bold" href="#skills">Skills</a></li>
					<li class="nav-item">/</li>
					<li class="nav-item"><a class="nav-link fw-bold" href="#projects">Proyectos</a></li>
					<li class="nav-item">/</li>
					<li class="nav-item"><a class="nav-link fw-bold" href="#contact">Contacto</a></li>
				  </ul>
				</div>
			  </div>
			</nav>
		</header>	  	  

		<main>
		<slot />
		</main>

		<footer>
		<p>&copy; {new Date().getFullYear()} Tu Nombre</p>
		</footer>
	
		<style>
			html, body {
				margin: 0;
				padding: 0;			
				background-color: var(--body-bg);			
			}
			
			.nav-link.active {
				color: var(--text-blue); /* o el estilo que quieras */
				font-weight: bold;
			}

			/* Estilo para el botón de tema: forma circular y centrado */
			#theme-toggle {
				border-radius: 50%;
				width: 40px;
				height: 40px;
				padding: 0;
				border: 1px solid var(--text-default); /* Usamos la variable para que cambie según el tema */
				background-color: transparent;
				display: flex;
				align-items: center;
				justify-content: center;
				cursor: pointer;
			}

			/* Si quieres que el botón no tenga sombra o fondo adicional, puedes ajustar aquí */
			#theme-toggle:focus {
				outline: none;
				box-shadow: none;
			}
			
			.dropdown-menu {
				background-color: var(--dropdown-bg);
				margin-top: 12px;
				border-radius: 10px;
				min-width: 180px;
				right: 0;
				left: auto; /* Asegura que se alinee a la derecha */
				opacity: 0;
				transform: translateY(-10px);
			}

			.dropdown-menu.show {
				animation: slideDown 0.3s ease forwards;
			}		

			@keyframes slideDown {
				from {
					opacity: 0;
					transform: translateY(-10px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			.dropdown-menu a {
				font-size: 16px;
				padding: 8px 16px;
			}

			.dropdown-item:hover {
				background-color: transparent;
			}
			
			/* Fijar el header y transición de fondo */
			header {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				z-index: 1000; /* Para que quede por encima de otros elementos */
				background-color: var(--header-bg); /* Color inicial */
				transition: background-color 0.3s ease;
			}

			/* Estado del header al hacer scroll (color ligeramente más claro) */
			header.scrolled {
				background-color: var(--header-bg-scrolled); /* Cambia este valor si deseas otro tono */
			}

			/* Enlaces dentro del header siempre en blanco */
			header a {
				color: var(--text-default);
			}

			header li {
				color: var(--text-default);
			}

			nav ul {			
				gap: 1rem;												
			}					

			nav a:hover {
				color: var(--nav-hover-color);
			}		

			main {			
				padding: 0;			
				margin: 0;
				padding-top: 80px;
			}

			footer {
				text-align: center;
				padding: 1rem;
				background-color: var(--footer-bg);
				color: var(--text-default);
				/* box-shadow: 2px -2px 2px 1px rgba(0, 0, 0, 0.2); */
			}

			/* Scrollbar moderno (compatible con WebKit: Chrome, Edge, Safari) */
			::-webkit-scrollbar {
			width: 8px;
			height: 8px;
			}

			::-webkit-scrollbar-track {
				background: transparent;
			}

			::-webkit-scrollbar-thumb {
				border-radius: 8px;
				border: 2px solid transparent;
				background-clip: content-box;
			}

			/* Firefox */
			* {
				scrollbar-width: thin;		
			}
		</style>
		<BootstrapClientScript client:only="react" />
		<script>
			document.addEventListener("DOMContentLoaded", () => {
			  const header = document.querySelector("header");
		  
			  window.addEventListener("scroll", () => {
				if (window.scrollY > 0) {
				  header.classList.add("scrolled");
				} else {
				  header.classList.remove("scrolled");
				}
			  });
			});




			const header = document.querySelector("header");
			const themeToggle = document.getElementById("theme-toggle");
			const rootElement = document.documentElement; // <html>

			// Iconos SVG (puedes reemplazarlos por otros si prefieres)
			const sunIcon = `
			<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" width="24" height="24">
				<path d="M6.76 4.84l-1.8-1.79-1.42 1.41 1.79 1.8 1.43-1.42zm10.48 0l1.79-1.8-1.41-1.41-1.8 1.79 1.42 1.42zM12 4V1h-1v3h1zm0 19v-3h-1v3h1zm8-10h3v-1h-3v1zm-19 0H1v-1h3v1zm15.07 6.07l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4zM4.93 18.93l-1.79 1.8 1.41 1.41 1.8-1.79-1.42-1.42zM12 8a4 4 0 100 8 4 4 0 000-8z"/>
			</svg>`;
      
			const moonIcon = `
			<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" width="24" height="24">
				<path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/>
			</svg>`;

			// Detecta la preferencia del usuario (o usa localStorage si ya hay guardada)
			if (!localStorage.getItem("theme")) {
				if (window.matchMedia && window.matchMedia("(prefers-color-scheme: light)").matches) {
					rootElement.classList.add("light-mode");
					themeToggle.innerHTML = sunIcon;
					localStorage.setItem("theme", "light");
				} else {
					localStorage.setItem("theme", "dark");
					themeToggle.innerHTML = moonIcon;
				}
			} else {
				if (localStorage.getItem("theme") === "light") {
					rootElement.classList.add("light-mode");
					themeToggle.innerHTML = sunIcon;
				} else {
					themeToggle.innerHTML = moonIcon;
				}
			}

			// Detecta scroll para header (ya lo tienes)
			window.addEventListener("scroll", () => {
				if (window.scrollY > 0) {
					header.classList.add("scrolled");
				} else {
					header.classList.remove("scrolled");
				}
			});

			// Evento para cambiar el tema
			themeToggle.addEventListener("click", () => {
				rootElement.classList.toggle("light-mode");
				if (rootElement.classList.contains("light-mode")) {
					localStorage.setItem("theme", "light");
					themeToggle.innerHTML = sunIcon;
				} else {
					localStorage.setItem("theme", "dark");
					themeToggle.innerHTML = moonIcon;
				}
			});





			// 1. Seleccionamos todas las secciones que tengan un id
			const sections = document.querySelectorAll("section[id]");
			// 2. Seleccionamos los enlaces del nav
			const navLinks = document.querySelectorAll("nav a.nav-link");

			// 3. Configuramos el IntersectionObserver
			const observer = new IntersectionObserver(
				entries => {
					entries.forEach(entry => {
					// Si la sección está al menos en un 50% visible en el viewport
						if (entry.isIntersecting) {
							const id = entry.target.getAttribute("id");
						
							// Removemos 'active' de todos los enlaces
							navLinks.forEach(link => {
								link.classList.remove("active");
								// Añadimos 'active' solo al enlace cuyo href coincide con la sección en pantalla
								if (link.getAttribute("href") === "#" + id) {
									link.classList.add("active");
								}
							});
						}
					});
				},
				// threshold: 0.5 => significa que el 50% de la sección debe ser visible
				{ threshold: 0.9 }
			);

			// 4. Observamos cada sección
			sections.forEach(section => {
				observer.observe(section);
			});
		</script>
  	</body>
</html>

